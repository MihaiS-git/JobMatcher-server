plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.jobmatcher'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'com.google.api-client:google-api-client:2.8.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.39.0'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev20250630-2.0.0'
    implementation 'com.google.http-client:google-http-client-gson:1.47.1'

    implementation 'com.cloudinary:cloudinary-http44:1.39.0'
    implementation 'net.coobird:thumbnailator:0.4.20'

    implementation 'org.owasp.encoder:encoder:1.3.1'
    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20240325.1'
    implementation 'commons-validator:commons-validator:1.10.0'

    implementation 'com.stripe:stripe-java:30.0.0'
    implementation 'com.google.code.gson:gson:2.11.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.4.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.h2database:h2:2.4.240'
}

// --- Unit test task (only unit tests) ---
tasks.register('unitTests', Test) {
    description = 'Runs only unit tests'
    group = 'verification'

    useJUnitPlatform()

    // exclude integration tests by package
    filter {
        excludeTestsMatching "com.jobmatcher.server.controller.*"
    }

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    jacoco.destinationFile = layout.buildDirectory.file("jacoco/jacoco-unitTests.exec").get().asFile
    finalizedBy 'jacocoUnitTestsReport'
}

// --- JaCoCo report for unit tests ---
tasks.register('jacocoUnitTestsReport', JacocoReport) {
    dependsOn tasks.named('unitTests')
    executionData.setFrom(layout.buildDirectory.file("jacoco/jacoco-unitTests.exec"))
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(sourceSets.main.output))
    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/unit"))
    }
}

// --- Configurations for integration tests ---
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

// --- Integration test task ---
tasks.register('integrationTests', Test) {
    description = 'Runs integration tests only'
    group = 'verification'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    useJUnitPlatform()

    // exclude integration tests by package
    filter {
        excludeTestsMatching "com.jobmatcher.server.service.*"
    }

    jacoco.destinationFile = layout.buildDirectory.file("jacoco/jacoco-integrationTests.exec").get().asFile
    finalizedBy 'jacocoIntegrationTestsReport'
}

// Integration test report
tasks.register('jacocoIntegrationTestsReport', JacocoReport) {
    dependsOn tasks.named('integrationTests')
    executionData.setFrom(layout.buildDirectory.file("jacoco/jacoco-integrationTests.exec"))
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(sourceSets.main.output))
    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/integration"))
    }
}

tasks.register('jacocoCombinedReport', JacocoReport) {
    dependsOn tasks.named('unitTests'), tasks.named('integrationTests')

    executionData.setFrom(files(
            layout.buildDirectory.file("jacoco/jacoco-unitTests.exec"),
            layout.buildDirectory.file("jacoco/jacoco-integrationTests.exec")
    ))

    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(sourceSets.main.output))

    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/combined"))
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/combined/combined-report.xml"))
    }
}

tasks.register('runAllTestsWithCoverage') {
    group = 'verification'
    description = 'Runs all unit + integration tests and generates combined coverage report'

    dependsOn 'unitTests', 'integrationTests', 'jacocoCombinedReport'
}
